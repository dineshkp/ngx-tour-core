{"version":3,"sources":["../../../projects/ngx-tour-core/src/lib/tour.service.ts","../../../projects/ngx-tour-core/src/lib/tour-hotkey-listener.component.ts","../../../projects/ngx-tour-core/src/lib/tour.module.ts"],"names":["TourState","TourService","router","this","stepShow$","Subject","stepHide$","initialize$","start$","end$","pause$","resume$","anchorRegister$","anchorUnregister$","events$","mergeStatic","pipe","map","value","name","steps","anchors","status","OFF","isHotKeysEnabled","prototype","initialize","stepDefaults","length","step","Object","assign","next","disableHotkeys","enableHotkeys","start","startAt","stepId","_this","ON","goToStep","loadStep","events","filter","event","NavigationStart","first","subscribe","currentStep","hasOwnProperty","hideStep","end","undefined","pause","PAUSED","resume","showStep","toggle","hasNext","nextStep","indexOf","console","warn","prev","hasPrev","prevStep","goto","register","anchorId","anchor","Error","unregister","getStatus","isHotkeysEnabled","navigatePromise","Promise","resolve","route","navigateByUrl","Array","isArray","navigate","then","navigated","setTimeout","setCurrentStep","find","showTourStep","hideTourStep","Injectable","Router","TourHotkeyListenerComponent","tourService","onEscapeKey","onArrowRightKey","onArrowLeftKey","Component","args","selector","template","HostListener","TourModule","forRoot","ngModule","providers","NgModule","declarations","exports","imports","CommonModule","RouterModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {NavigationStart, Router} from '@angular/router';\nimport type {UrlSegment} from '@angular/router';\n\nimport { TourAnchorDirective } from './tour-anchor.directive';\nimport { Subject, Observable, merge as mergeStatic } from 'rxjs';\nimport { first, map, filter } from 'rxjs/operators';\n\nexport interface IStepOption {\n  stepId?: string;\n  anchorId?: string;\n  title?: string;\n  content?: string;\n  route?: string | UrlSegment[];\n  nextStep?: number | string;\n  prevStep?: number | string;\n  placement?: any;\n  preventScrolling?: boolean;\n  prevBtnTitle?: string;\n  nextBtnTitle?: string;\n  endBtnTitle?: string;\n}\n\nexport enum TourState {\n  OFF,\n  ON,\n  PAUSED\n}\n\n@Injectable()\nexport class TourService<T extends IStepOption = IStepOption> {\n  public stepShow$: Subject<T> = new Subject();\n  public stepHide$: Subject<T> = new Subject();\n  public initialize$: Subject<T[]> = new Subject();\n  public start$: Subject<T> = new Subject();\n  public end$: Subject<any> = new Subject();\n  public pause$: Subject<T> = new Subject();\n  public resume$: Subject<T> = new Subject();\n  public anchorRegister$: Subject<string> = new Subject();\n  public anchorUnregister$: Subject<string> = new Subject();\n  public events$: Observable<{ name: string; value: any }> = mergeStatic(\n    this.stepShow$.pipe(map(value => ({ name: 'stepShow', value }))),\n    this.stepHide$.pipe(map(value => ({ name: 'stepHide', value }))),\n    this.initialize$.pipe(map(value => ({ name: 'initialize', value }))),\n    this.start$.pipe(map(value => ({ name: 'start', value }))),\n    this.end$.pipe(map(value => ({ name: 'end', value }))),\n    this.pause$.pipe(map(value => ({ name: 'pause', value }))),\n    this.resume$.pipe(map(value => ({ name: 'resume', value }))),\n    this.anchorRegister$.pipe(\n      map(value => ({\n        name: 'anchorRegister',\n        value\n      }))\n    ),\n    this.anchorUnregister$.pipe(\n      map(value => ({\n        name: 'anchorUnregister',\n        value\n      }))\n    )\n  );\n\n  public steps: T[] = [];\n  public currentStep: T;\n\n  public anchors: { [anchorId: string]: TourAnchorDirective } = {};\n  private status: TourState = TourState.OFF;\n  private isHotKeysEnabled = true;\n\n  constructor(private router: Router) {}\n\n  public initialize(steps: T[], stepDefaults?: T): void {\n    if (steps && steps.length > 0) {\n      this.status = TourState.OFF;\n      this.steps = steps.map(step => Object.assign({}, stepDefaults, step));\n      this.initialize$.next(this.steps);\n    }\n  }\n\n  public disableHotkeys(): void {\n    this.isHotKeysEnabled = false;\n  }\n\n  public enableHotkeys(): void {\n    this.isHotKeysEnabled = true;\n  }\n\n  public start(): void {\n    this.startAt(0);\n  }\n\n  public startAt(stepId: number | string): void {\n    this.status = TourState.ON;\n    this.goToStep(this.loadStep(stepId));\n    this.start$.next();\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationStart), first())\n      .subscribe(() => {\n        if (this.currentStep && this.currentStep.hasOwnProperty('route')) {\n          this.hideStep(this.currentStep);\n        }\n      });\n  }\n\n  public end(): void {\n    this.status = TourState.OFF;\n    this.hideStep(this.currentStep);\n    this.currentStep = undefined;\n    this.end$.next();\n  }\n\n  public pause(): void {\n    this.status = TourState.PAUSED;\n    this.hideStep(this.currentStep);\n    this.pause$.next();\n  }\n\n  public resume(): void {\n    this.status = TourState.ON;\n    this.showStep(this.currentStep);\n    this.resume$.next();\n  }\n\n  public toggle(pause?: boolean): void {\n    if (pause) {\n      if (this.currentStep) {\n        this.pause();\n      } else {\n        this.resume();\n      }\n    } else {\n      if (this.currentStep) {\n        this.end();\n      } else {\n        this.start();\n      }\n    }\n  }\n\n  public next(): void {\n    if (this.hasNext(this.currentStep)) {\n      this.goToStep(\n        this.loadStep(\n          this.currentStep.nextStep || this.steps.indexOf(this.currentStep) + 1\n        )\n      );\n    }\n  }\n\n  public hasNext(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get next step. No currentStep.');\n      return false;\n    }\n    return (\n      step.nextStep !== undefined ||\n      this.steps.indexOf(step) < this.steps.length - 1\n    );\n  }\n\n  public prev(): void {\n    if (this.hasPrev(this.currentStep)) {\n      this.goToStep(\n        this.loadStep(\n          this.currentStep.prevStep || this.steps.indexOf(this.currentStep) - 1\n        )\n      );\n    }\n  }\n\n  public hasPrev(step: T): boolean {\n    if (!step) {\n      console.warn('Can\\'t get previous step. No currentStep.');\n      return false;\n    }\n    return step.prevStep !== undefined || this.steps.indexOf(step) > 0;\n  }\n\n  public goto(stepId: number | string): void {\n    this.goToStep(this.loadStep(stepId));\n  }\n\n  public register(anchorId: string, anchor: TourAnchorDirective): void {\n    if (!anchorId)\n      return;\n    if (this.anchors[anchorId]) {\n      throw new Error('anchorId ' + anchorId + ' already registered!');\n    }\n    this.anchors[anchorId] = anchor;\n    this.anchorRegister$.next(anchorId);\n  }\n\n  public unregister(anchorId: string): void {\n    if (!anchorId)\n      return;\n    delete this.anchors[anchorId];\n    this.anchorUnregister$.next(anchorId);\n  }\n\n  public getStatus(): TourState {\n    return this.status;\n  }\n\n  public isHotkeysEnabled(): boolean {\n    return this.isHotKeysEnabled;\n  }\n\n  private goToStep(step: T): void {\n    if (!step) {\n      console.warn('Can\\'t go to non-existent step');\n      this.end();\n      return;\n    }\n    let navigatePromise: Promise<boolean> = new Promise(resolve =>\n      resolve(true)\n    );\n    if (step.route !== undefined && typeof step.route === 'string') {\n      navigatePromise = this.router.navigateByUrl(step.route);\n    } else if (step.route && Array.isArray(step.route)) {\n      navigatePromise = this.router.navigate(step.route);\n    }\n    navigatePromise.then(navigated => {\n      if (navigated !== false) {\n        setTimeout(() => this.setCurrentStep(step));\n      }\n    });\n  }\n\n  private loadStep(stepId: number | string): T {\n    if (typeof stepId === 'number') {\n      return this.steps[stepId];\n    } else {\n      return this.steps.find(step => step.stepId === stepId);\n    }\n  }\n\n  private setCurrentStep(step: T): void {\n    if (this.currentStep) {\n      this.hideStep(this.currentStep);\n    }\n    this.currentStep = step;\n    this.showStep(this.currentStep);\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationStart), first())\n      .subscribe(() => {\n        if (this.currentStep && this.currentStep.hasOwnProperty('route')) {\n          this.hideStep(this.currentStep);\n        }\n      });\n  }\n\n  private showStep(step: T): void {\n    const anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      console.warn(\n        'Can\\'t attach to unregistered anchor with id ' + step.anchorId\n      );\n      this.end();\n      return;\n    }\n    anchor.showTourStep(step);\n    this.stepShow$.next(step);\n  }\n\n  private hideStep(step: T): void {\n    const anchor = this.anchors[step && step.anchorId];\n    if (!anchor) {\n      return;\n    }\n    anchor.hideTourStep();\n    this.stepHide$.next(step);\n  }\n}\n","import { Component, HostListener } from '@angular/core';\n\nimport { TourService, TourState } from './tour.service';\n\n@Component({\n  selector: 'tour-hotkey-listener',\n  template: `<ng-content></ng-content>`\n})\nexport class TourHotkeyListenerComponent {\n  constructor(public tourService: TourService) {}\n\n  /**\n   * Configures hot keys for controlling the tour with the keyboard\n   */\n  @HostListener('window:keydown.Escape')\n  public onEscapeKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.end();\n    }\n  }\n\n  @HostListener('window:keydown.ArrowRight')\n  public onArrowRightKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.hasNext(this.tourService.currentStep) &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.next();\n    }\n  }\n\n  @HostListener('window:keydown.ArrowLeft')\n  public onArrowLeftKey(): void {\n    if (\n      this.tourService.getStatus() === TourState.ON &&\n      this.tourService.hasPrev(this.tourService.currentStep) &&\n      this.tourService.isHotkeysEnabled()\n    ) {\n      this.tourService.prev();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { TourHotkeyListenerComponent } from './tour-hotkey-listener.component';\nimport { TourService } from './tour.service';\n\n@NgModule({\n    declarations: [TourHotkeyListenerComponent],\n    exports: [TourHotkeyListenerComponent],\n    imports: [CommonModule, RouterModule],\n})\nexport class TourModule {\n    public static forRoot(): ModuleWithProviders<TourModule> {\n        return {\n            ngModule: TourModule,\n            providers: [\n                TourService,\n            ],\n        };\n    }\n}\n\nexport { TourService };\n"]}